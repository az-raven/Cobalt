#pragma once

// NOTE: This is a super basic font for use only during boot.
// It's really not supposed to look good.
// Characters are 8x8 bitmaps.

#include <stdint.h>
#include <graphics/bitmap.h>
#include <util/option.h>
#include <graphics/font.h>

using Cobalt::Graphics::Bitmap;
using Cobalt::Graphics::Font;
using Cobalt::Utility::Option;

namespace Cobalt::Graphics::Fonts {

	const uint8_t A[8] = {
		0b00000000,

		0b00011000,
		0b00100100,
		0b00100100,

		0b00111100,
		0b00100100,
		0b00100100,

		0b00000000};

	const uint8_t B[8] = {
		0b00000000,

		0b00111000,
		0b00100100,
		0b00100100,

		0b00111000,
		0b00100100,
		0b00111100,

		0b00000000
	};

	const uint8_t C[8] = {
		0b00000000,

		0b00011100,
		0b00100000,
		0b00100000,

		0b00100000,
		0b00100000,
		0b00011100,

		0b00000000
	};

	const uint8_t D[8] = {
		0b00000000,

		0b00111000,
		0b00100100,
		0b00100100,

		0b00100100,
		0b00100100,
		0b00111000,

		0b00000000
	};

	const uint8_t E[8] = {
		0b00000000,

		0b00111100,
		0b00100000,
		0b00100000,

		0b00111000,
		0b00100000,
		0b00111100,

		0b00000000
	};

	const uint8_t F[8] = {
		0b00000000,

		0b00111100,
		0b00100000,
		0b00100000,

		0b00111000,
		0b00100000,
		0b00100000,

		0b00000000
	};

	const uint8_t G[8] = {
		0b00000000,

		0b00011100,
		0b00100000,
		0b00100000,

		0b00101100,
		0b00100100,
		0b00011100,

		0b00000000
	};

	const uint8_t H[8] = {
		0b00000000,

		0b00100100,
		0b00100100,
		0b00100100,

		0b00111100,
		0b00100100,
		0b00100100,

		0b00000000
	};

	const uint8_t I[8] = {
		0b00000000,

		0b00011100,
		0b00001000,
		0b00001000,

		0b00001000,
		0b00001000,
		0b00011100,

		0b00000000
	};

	const uint8_t J[8] = {
		0b00000000,

		0b00011100,
		0b00001000,
		0b00001000,

		0b00001000,
		0b00101000,
		0b00011000,

		0b00000000
	};

	const uint8_t K[8] = {
		0b00000000,

		0b00100100,
		0b00101000,
		0b00110000,

		0b00101000,
		0b00100100,
		0b00100100,

		0b00000000
	};

	const uint8_t L[8] = {
		0b00000000,

		0b00100000,
		0b00100000,
		0b00100000,

		0b00100000,
		0b00100000,
		0b00111100,

		0b00000000
	};

	const uint8_t M[8] = {
		0b00000000,

		0b00100010,
		0b00110110,
		0b00101010,

		0b00100010,
		0b00100010,
		0b00100010,

		0b00000000
	};

	const uint8_t N[8] = {
		0b00000000,

		0b00100010,
		0b00110010,
		0b00101010,

		0b00100110,
		0b00100010,
		0b00100010,

		0b00000000
	};

	const uint8_t O[8] = {
		0b00000000,

		0b00011100,
		0b00100010,
		0b00100010,

		0b00100010,
		0b00100010,
		0b00011100,

		0b00000000
	};

	const uint8_t P[8] = {
		0b00000000,

		0b00111100,
		0b00100010,
		0b00100010,

		0b00111100,
		0b00100000,
		0b00100000,

		0b00000000
	};

	const uint8_t Q[8] = {
		0b00000000,

		0b00011100,
		0b00100010,
		0b00100010,

		0b00100010,
		0b00100110,
		0b00011110,

		0b00000000
	};

	const uint8_t R[8] = {
		0b00000000,

		0b00111100,
		0b00100010,
		0b00100010,

		0b00111100,
		0b00100100,
		0b00100010,

		0b00000000
	};

	const uint8_t S[8] = {
		0b00000000,

		0b00011100,
		0b00100000,
		0b00100000,

		0b00011100,
		0b00000100,
		0b00111000,

		0b00000000
	};

	const uint8_t T[8] = {
		0b00000000,

		0b00111100,
		0b00010000,
		0b00010000,

		0b00010000,
		0b00010000,
		0b00010000,

		0b00000000
	};

	const uint8_t U[8] = {
		0b00000000,

		0b00100010,
		0b00100010,
		0b00100010,

		0b00100010,
		0b00100010,
		0b00011100,

		0b00000000
	};

	const uint8_t V[8] = {
		0b00000000,

		0b00100010,
		0b00100010,
		0b00100010,

		0b00100010,
		0b00010100,
		0b00001000,

		0b00000000
	};

	const uint8_t W[8] = {
		0b00000000,

		0b00100010,
		0b00100010,
		0b00100010,

		0b00101010,
		0b00101010,
		0b00010100,

		0b00000000
	};

	const uint8_t X[8] = {
		0b00000000,

		0b00100010,
		0b00100010,
		0b00010100,

		0b00001000,
		0b00010100,
		0b00100010,

		0b00000000
	};

	const uint8_t Y[8] = {
		0b00000000,

		0b00100010,
		0b00100010,
		0b00010100,

		0b00001000,
		0b00001000,
		0b00001000,

		0b00000000
	};

	const uint8_t Z[8] = {
		0b00000000,

		0b00111100,
		0b00000100,
		0b00001000,

		0b00010000,
		0b00100000,
		0b00111100,

		0b00000000
	};

	const uint8_t DASH[8] = {
		0b00000000,

		0b00000000,
		0b00000000,
		0b00111100,

		0b00000000,
		0b00000000,
		0b00000000,

		0b00000000
	};

	const uint8_t EQUALS[8] = {
		0b00000000,

		0b00000000,
		0b00111100,
		0b00000000,

		0b00111100,
		0b00000000,
		0b00000000,

		0b00000000
	};

	const uint8_t COLON[8] = {
		0b00000000,

		0b00000000,
		0b00011000,
		0b00011000,

		0b00000000,
		0b00011000,
		0b00011000,

		0b00000000
	};

	const uint8_t SEMICOLON[8] = {
		0b00000000,

		0b00000000,
		0b00011000,
		0b00011000,

		0b00000000,
		0b00011000,
		0b00010000,

		0b00100000
	};

	const uint8_t UNDERSCORE[8] = {
		0b00000000,

		0b00000000,
		0b00000000,
		0b00000000,

		0b00000000,
		0b00000000,
		0b00111100,

		0b00000000
	};

	const uint8_t PERIOD[8] = {
		0,
		
		0,
		0,
		0,

		0,
		0b00110000,
		0b00110000,

		0b00000000
	};

	const uint8_t SPACE[8] = {
		0,

		0,
		0,
		0,
		
		0,
		0,
		0,

		0
	};

	class Basic8x8Mono : public Font {
		public:
			Basic8x8Mono() { }

			inline virtual Bitmap get(char c) {
				#define map(char, bitmap, w, h) case char: return Bitmap((uint8_t *)bitmap, w, h);
				switch (c) {
					map('A', A, 8, 8)
					map('B', B, 8, 8)
					map('C', C, 8, 8)
					map('D', D, 8, 8)
					map('E', E, 8, 8)
					map('F', F, 8, 8)
					map('G', G, 8, 8)
					map('H', H, 8, 8)
					map('I', I, 8, 8)
					map('J', J, 8, 8)
					map('K', K, 8, 8)
					map('L', L, 8, 8)
					map('M', M, 8, 8)
					map('N', N, 8, 8)
					map('O', O, 8, 8)
					map('P', P, 8, 8)
					map('Q', Q, 8, 8)
					map('R', R, 8, 8)
					map('S', S, 8, 8)
					map('T', T, 8, 8)
					map('U', U, 8, 8)
					map('V', V, 8, 8)
					map('W', W, 8, 8)
					map('X', X, 8, 8)
					map('Y', Y, 8, 8)
					map('Z', Z, 8, 8)
					map('-', DASH, 8, 8)
					map('=', EQUALS, 8, 8)
					map(':', COLON, 8, 8)
					map(';', SEMICOLON, 8, 8)
					map('_', UNDERSCORE, 8, 8)
					map('.', PERIOD, 8, 8)
					default:
						return Bitmap((uint8_t *)SPACE, 8, 8);
				}
				#undef map
			}
	};
}
